### YamlMime:ManagedReference
items:
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  commentId: T:OpenForge.Cryptography.LibOqs.SIG.SigInstance
  id: SigInstance
  parent: OpenForge.Cryptography.LibOqs.SIG
  children:
  - OpenForge.Cryptography.LibOqs.SIG.SigInstance.AlgorithmName
  - OpenForge.Cryptography.LibOqs.SIG.SigInstance.Dispose
  - OpenForge.Cryptography.LibOqs.SIG.SigInstance.Finalize
  - OpenForge.Cryptography.LibOqs.SIG.SigInstance.GenerateKeyPair
  - OpenForge.Cryptography.LibOqs.SIG.SigInstance.GetAlgorithmInfo
  - OpenForge.Cryptography.LibOqs.SIG.SigInstance.Sign(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  - OpenForge.Cryptography.LibOqs.SIG.SigInstance.SignWithContext(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  - OpenForge.Cryptography.LibOqs.SIG.SigInstance.SupportsContextString
  - OpenForge.Cryptography.LibOqs.SIG.SigInstance.Verify(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  - OpenForge.Cryptography.LibOqs.SIG.SigInstance.VerifyWithContext(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  langs:
  - csharp
  - vb
  name: SigInstance
  nameWithType: SigInstance
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  type: Class
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SigInstance
    path: src/SIG/SigProvider.cs
    startLine: 110
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: >-
    Represents a digital signature instance for performing cryptographic signing and verification operations.

    This class provides methods for key generation, message signing, and signature verification.
  example: []
  syntax:
    content: 'public sealed class SigInstance : IDisposable'
    content.vb: Public NotInheritable Class SigInstance Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.AlgorithmName
  commentId: P:OpenForge.Cryptography.LibOqs.SIG.SigInstance.AlgorithmName
  id: AlgorithmName
  parent: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  langs:
  - csharp
  - vb
  name: AlgorithmName
  nameWithType: SigInstance.AlgorithmName
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.AlgorithmName
  type: Property
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: AlgorithmName
    path: src/SIG/SigProvider.cs
    startLine: 126
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: Gets the name of the digital signature algorithm used by this instance.
  example: []
  syntax:
    content: public string AlgorithmName { get; }
    parameters: []
    return:
      type: System.String
      description: The algorithm identifier string.
    content.vb: Public ReadOnly Property AlgorithmName As String
  overload: OpenForge.Cryptography.LibOqs.SIG.SigInstance.AlgorithmName*
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SupportsContextString
  commentId: M:OpenForge.Cryptography.LibOqs.SIG.SigInstance.SupportsContextString
  id: SupportsContextString
  parent: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  langs:
  - csharp
  - vb
  name: SupportsContextString()
  nameWithType: SigInstance.SupportsContextString()
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SupportsContextString()
  type: Method
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SupportsContextString
    path: src/SIG/SigProvider.cs
    startLine: 134
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: >-
    Determines whether this signature algorithm supports context strings for domain separation.

    Context strings allow the same keys to be used safely in different contexts.
  example: []
  syntax:
    content: public bool SupportsContextString()
    return:
      type: System.Boolean
      description: True if the algorithm supports context strings, false otherwise.
    content.vb: Public Function SupportsContextString() As Boolean
  overload: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SupportsContextString*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the instance has been disposed.
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.GetAlgorithmInfo
  commentId: M:OpenForge.Cryptography.LibOqs.SIG.SigInstance.GetAlgorithmInfo
  id: GetAlgorithmInfo
  parent: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  langs:
  - csharp
  - vb
  name: GetAlgorithmInfo()
  nameWithType: SigInstance.GetAlgorithmInfo()
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.GetAlgorithmInfo()
  type: Method
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: GetAlgorithmInfo
    path: src/SIG/SigProvider.cs
    startLine: 146
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: Gets detailed information about the signature algorithm including key sizes and security parameters.
  example: []
  syntax:
    content: public OqsSig GetAlgorithmInfo()
    return:
      type: OpenForge.Cryptography.LibOqs.SIG.OqsSig
      description: An OqsSig structure containing algorithm details.
    content.vb: Public Function GetAlgorithmInfo() As OqsSig
  overload: OpenForge.Cryptography.LibOqs.SIG.SigInstance.GetAlgorithmInfo*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the instance has been disposed.
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.GenerateKeyPair
  commentId: M:OpenForge.Cryptography.LibOqs.SIG.SigInstance.GenerateKeyPair
  id: GenerateKeyPair
  parent: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  langs:
  - csharp
  - vb
  name: GenerateKeyPair()
  nameWithType: SigInstance.GenerateKeyPair()
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.GenerateKeyPair()
  type: Method
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: GenerateKeyPair
    path: src/SIG/SigProvider.cs
    startLine: 159
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: >-
    Generates a new cryptographic key pair using secure random number generation.

    The returned SigKeyPair should be disposed to securely clear the secret key.
  example: []
  syntax:
    content: public SigKeyPair GenerateKeyPair()
    return:
      type: OpenForge.Cryptography.LibOqs.SIG.SigKeyPair
      description: A SigKeyPair containing the public and secret keys.
    content.vb: Public Function GenerateKeyPair() As SigKeyPair
  overload: OpenForge.Cryptography.LibOqs.SIG.SigInstance.GenerateKeyPair*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the instance has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if key pair generation fails.
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Sign(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:OpenForge.Cryptography.LibOqs.SIG.SigInstance.Sign(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: Sign(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  langs:
  - csharp
  - vb
  name: Sign(ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  nameWithType: SigInstance.Sign(ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Sign(System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>)
  type: Method
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: Sign
    path: src/SIG/SigProvider.cs
    startLine: 187
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: >-
    Signs a message using the provided secret key, creating a digital signature.

    The signature can be verified using the corresponding public key.
  example: []
  syntax:
    content: public byte[] Sign(ReadOnlySpan<byte> message, ReadOnlySpan<byte> secretKey)
    parameters:
    - id: message
      type: System.ReadOnlySpan{System.Byte}
      description: The message to sign.
    - id: secretKey
      type: System.ReadOnlySpan{System.Byte}
      description: The secret key for signing.
    return:
      type: System.Byte[]
      description: The digital signature bytes.
    content.vb: Public Function Sign(message As ReadOnlySpan(Of Byte), secretKey As ReadOnlySpan(Of Byte)) As Byte()
  overload: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Sign*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the instance has been disposed.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the secret key has an invalid length.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if signing fails.
  nameWithType.vb: SigInstance.Sign(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
  fullName.vb: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Sign(System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte))
  name.vb: Sign(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Verify(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:OpenForge.Cryptography.LibOqs.SIG.SigInstance.Verify(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: Verify(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  langs:
  - csharp
  - vb
  name: Verify(ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  nameWithType: SigInstance.Verify(ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Verify(System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>)
  type: Method
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: Verify
    path: src/SIG/SigProvider.cs
    startLine: 231
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: Verifies a digital signature against the original message using the signer's public key.
  example: []
  syntax:
    content: public bool Verify(ReadOnlySpan<byte> message, ReadOnlySpan<byte> signature, ReadOnlySpan<byte> publicKey)
    parameters:
    - id: message
      type: System.ReadOnlySpan{System.Byte}
      description: The original message that was signed.
    - id: signature
      type: System.ReadOnlySpan{System.Byte}
      description: The signature to verify.
    - id: publicKey
      type: System.ReadOnlySpan{System.Byte}
      description: The public key for verification.
    return:
      type: System.Boolean
      description: True if the signature is valid for the message and public key, false otherwise.
    content.vb: Public Function Verify(message As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), publicKey As ReadOnlySpan(Of Byte)) As Boolean
  overload: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Verify*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the instance has been disposed.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the public key has an invalid length.
  nameWithType.vb: SigInstance.Verify(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
  fullName.vb: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Verify(System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte))
  name.vb: Verify(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SignWithContext(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:OpenForge.Cryptography.LibOqs.SIG.SigInstance.SignWithContext(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: SignWithContext(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  langs:
  - csharp
  - vb
  name: SignWithContext(ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  nameWithType: SigInstance.SignWithContext(ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SignWithContext(System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>)
  type: Method
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SignWithContext
    path: src/SIG/SigProvider.cs
    startLine: 257
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: >-
    Signs a message with a context string using the signature algorithm.

    This provides domain separation for signatures in different contexts.
  example: []
  syntax:
    content: public byte[] SignWithContext(ReadOnlySpan<byte> message, ReadOnlySpan<byte> contextString, ReadOnlySpan<byte> secretKey)
    parameters:
    - id: message
      type: System.ReadOnlySpan{System.Byte}
      description: The message to sign.
    - id: contextString
      type: System.ReadOnlySpan{System.Byte}
      description: The context string for domain separation.
    - id: secretKey
      type: System.ReadOnlySpan{System.Byte}
      description: The secret key for signing.
    return:
      type: System.Byte[]
      description: The signature bytes.
    content.vb: Public Function SignWithContext(message As ReadOnlySpan(Of Byte), contextString As ReadOnlySpan(Of Byte), secretKey As ReadOnlySpan(Of Byte)) As Byte()
  overload: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SignWithContext*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Thrown if the algorithm doesn't support context strings.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if signing fails.
  nameWithType.vb: SigInstance.SignWithContext(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
  fullName.vb: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SignWithContext(System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte))
  name.vb: SignWithContext(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.VerifyWithContext(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:OpenForge.Cryptography.LibOqs.SIG.SigInstance.VerifyWithContext(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: VerifyWithContext(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  langs:
  - csharp
  - vb
  name: VerifyWithContext(ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  nameWithType: SigInstance.VerifyWithContext(ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.VerifyWithContext(System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>)
  type: Method
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: VerifyWithContext
    path: src/SIG/SigProvider.cs
    startLine: 306
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: >-
    Verifies a signature with a context string using the signature algorithm.

    This provides domain separation for signatures in different contexts.
  example: []
  syntax:
    content: public bool VerifyWithContext(ReadOnlySpan<byte> message, ReadOnlySpan<byte> signature, ReadOnlySpan<byte> contextString, ReadOnlySpan<byte> publicKey)
    parameters:
    - id: message
      type: System.ReadOnlySpan{System.Byte}
      description: The original message that was signed.
    - id: signature
      type: System.ReadOnlySpan{System.Byte}
      description: The signature to verify.
    - id: contextString
      type: System.ReadOnlySpan{System.Byte}
      description: The context string used during signing.
    - id: publicKey
      type: System.ReadOnlySpan{System.Byte}
      description: The public key for verification.
    return:
      type: System.Boolean
      description: True if the signature is valid, false otherwise.
    content.vb: Public Function VerifyWithContext(message As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), contextString As ReadOnlySpan(Of Byte), publicKey As ReadOnlySpan(Of Byte)) As Boolean
  overload: OpenForge.Cryptography.LibOqs.SIG.SigInstance.VerifyWithContext*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Thrown if the algorithm doesn't support context strings.
  nameWithType.vb: SigInstance.VerifyWithContext(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
  fullName.vb: OpenForge.Cryptography.LibOqs.SIG.SigInstance.VerifyWithContext(System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte))
  name.vb: VerifyWithContext(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Dispose
  commentId: M:OpenForge.Cryptography.LibOqs.SIG.SigInstance.Dispose
  id: Dispose
  parent: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SigInstance.Dispose()
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Dispose()
  type: Method
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: Dispose
    path: src/SIG/SigProvider.cs
    startLine: 330
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: >-
    Disposes the signature instance and releases all associated native resources.

    After disposal, this instance cannot be used for further operations.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Finalize
  commentId: M:OpenForge.Cryptography.LibOqs.SIG.SigInstance.Finalize
  id: Finalize
  parent: OpenForge.Cryptography.LibOqs.SIG.SigInstance
  langs:
  - csharp
  - vb
  name: ~SigInstance()
  nameWithType: SigInstance.~SigInstance()
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.~SigInstance()
  type: Method
  source:
    remote:
      path: src/SIG/SigProvider.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: Finalize
    path: src/SIG/SigProvider.cs
    startLine: 354
  assemblies:
  - OpenForge.Cryptography.LibOqs.SIG
  namespace: OpenForge.Cryptography.LibOqs.SIG
  summary: Finalizer that ensures native resources are cleaned up if Dispose was not called.
  example: []
  syntax:
    content: protected ~SigInstance()
    content.vb: 'Protected '
  overload: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Finalize*
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
references:
- uid: OpenForge.Cryptography.LibOqs.SIG
  commentId: N:OpenForge.Cryptography.LibOqs.SIG
  href: OpenForge.html
  name: OpenForge.Cryptography.LibOqs.SIG
  nameWithType: OpenForge.Cryptography.LibOqs.SIG
  fullName: OpenForge.Cryptography.LibOqs.SIG
  spec.csharp:
  - uid: OpenForge
    name: OpenForge
    href: OpenForge.html
  - name: .
  - uid: OpenForge.Cryptography
    name: Cryptography
    href: OpenForge.Cryptography.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs
    name: LibOqs
    href: OpenForge.Cryptography.LibOqs.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs.SIG
    name: SIG
    href: OpenForge.Cryptography.LibOqs.SIG.html
  spec.vb:
  - uid: OpenForge
    name: OpenForge
    href: OpenForge.html
  - name: .
  - uid: OpenForge.Cryptography
    name: Cryptography
    href: OpenForge.Cryptography.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs
    name: LibOqs
    href: OpenForge.Cryptography.LibOqs.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs.SIG
    name: SIG
    href: OpenForge.Cryptography.LibOqs.SIG.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.AlgorithmName*
  commentId: Overload:OpenForge.Cryptography.LibOqs.SIG.SigInstance.AlgorithmName
  href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_AlgorithmName
  name: AlgorithmName
  nameWithType: SigInstance.AlgorithmName
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.AlgorithmName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.objectdisposedexception
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SupportsContextString*
  commentId: Overload:OpenForge.Cryptography.LibOqs.SIG.SigInstance.SupportsContextString
  href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_SupportsContextString
  name: SupportsContextString
  nameWithType: SigInstance.SupportsContextString
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SupportsContextString
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.GetAlgorithmInfo*
  commentId: Overload:OpenForge.Cryptography.LibOqs.SIG.SigInstance.GetAlgorithmInfo
  href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_GetAlgorithmInfo
  name: GetAlgorithmInfo
  nameWithType: SigInstance.GetAlgorithmInfo
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.GetAlgorithmInfo
- uid: OpenForge.Cryptography.LibOqs.SIG.OqsSig
  commentId: T:OpenForge.Cryptography.LibOqs.SIG.OqsSig
  parent: OpenForge.Cryptography.LibOqs.SIG
  href: OpenForge.Cryptography.LibOqs.SIG.OqsSig.html
  name: OqsSig
  nameWithType: OqsSig
  fullName: OpenForge.Cryptography.LibOqs.SIG.OqsSig
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.GenerateKeyPair*
  commentId: Overload:OpenForge.Cryptography.LibOqs.SIG.SigInstance.GenerateKeyPair
  href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_GenerateKeyPair
  name: GenerateKeyPair
  nameWithType: SigInstance.GenerateKeyPair
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.GenerateKeyPair
- uid: OpenForge.Cryptography.LibOqs.SIG.SigKeyPair
  commentId: T:OpenForge.Cryptography.LibOqs.SIG.SigKeyPair
  parent: OpenForge.Cryptography.LibOqs.SIG
  href: OpenForge.Cryptography.LibOqs.SIG.SigKeyPair.html
  name: SigKeyPair
  nameWithType: SigKeyPair
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigKeyPair
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Sign*
  commentId: Overload:OpenForge.Cryptography.LibOqs.SIG.SigInstance.Sign
  href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_Sign_System_ReadOnlySpan_System_Byte__System_ReadOnlySpan_System_Byte__
  name: Sign
  nameWithType: SigInstance.Sign
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Sign
- uid: System.ReadOnlySpan{System.Byte}
  commentId: T:System.ReadOnlySpan{System.Byte}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<byte>
  nameWithType: ReadOnlySpan<byte>
  fullName: System.ReadOnlySpan<byte>
  nameWithType.vb: ReadOnlySpan(Of Byte)
  fullName.vb: System.ReadOnlySpan(Of Byte)
  name.vb: ReadOnlySpan(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Verify*
  commentId: Overload:OpenForge.Cryptography.LibOqs.SIG.SigInstance.Verify
  href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_Verify_System_ReadOnlySpan_System_Byte__System_ReadOnlySpan_System_Byte__System_ReadOnlySpan_System_Byte__
  name: Verify
  nameWithType: SigInstance.Verify
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Verify
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.notsupportedexception
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SignWithContext*
  commentId: Overload:OpenForge.Cryptography.LibOqs.SIG.SigInstance.SignWithContext
  href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_SignWithContext_System_ReadOnlySpan_System_Byte__System_ReadOnlySpan_System_Byte__System_ReadOnlySpan_System_Byte__
  name: SignWithContext
  nameWithType: SigInstance.SignWithContext
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.SignWithContext
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.VerifyWithContext*
  commentId: Overload:OpenForge.Cryptography.LibOqs.SIG.SigInstance.VerifyWithContext
  href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_VerifyWithContext_System_ReadOnlySpan_System_Byte__System_ReadOnlySpan_System_Byte__System_ReadOnlySpan_System_Byte__System_ReadOnlySpan_System_Byte__
  name: VerifyWithContext
  nameWithType: SigInstance.VerifyWithContext
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.VerifyWithContext
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Dispose*
  commentId: Overload:OpenForge.Cryptography.LibOqs.SIG.SigInstance.Dispose
  href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_Dispose
  name: Dispose
  nameWithType: SigInstance.Dispose
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Finalize*
  commentId: Overload:OpenForge.Cryptography.LibOqs.SIG.SigInstance.Finalize
  href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_Finalize
  name: ~SigInstance
  nameWithType: SigInstance.~SigInstance
  fullName: OpenForge.Cryptography.LibOqs.SIG.SigInstance.~SigInstance
  spec.csharp:
  - name: "~"
  - uid: OpenForge.Cryptography.LibOqs.SIG.SigInstance.Finalize*
    name: SigInstance
    href: OpenForge.Cryptography.LibOqs.SIG.SigInstance.html#OpenForge_Cryptography_LibOqs_SIG_SigInstance_Finalize
