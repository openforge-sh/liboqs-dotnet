### YamlMime:ManagedReference
items:
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem
  commentId: T:OpenForge.Cryptography.LibOqs.KEM.Kem
  id: Kem
  parent: OpenForge.Cryptography.LibOqs.KEM
  children:
  - OpenForge.Cryptography.LibOqs.KEM.Kem.#ctor(System.String)
  - OpenForge.Cryptography.LibOqs.KEM.Kem.AlgorithmName
  - OpenForge.Cryptography.LibOqs.KEM.Kem.CiphertextLength
  - OpenForge.Cryptography.LibOqs.KEM.Kem.ClaimedNistLevel
  - OpenForge.Cryptography.LibOqs.KEM.Kem.Decapsulate(System.Byte[],System.Byte[])
  - OpenForge.Cryptography.LibOqs.KEM.Kem.Dispose
  - OpenForge.Cryptography.LibOqs.KEM.Kem.Encapsulate(System.Byte[])
  - OpenForge.Cryptography.LibOqs.KEM.Kem.GenerateKeyPair
  - OpenForge.Cryptography.LibOqs.KEM.Kem.GetSupportedAlgorithms
  - OpenForge.Cryptography.LibOqs.KEM.Kem.IsAlgorithmSupported(System.String)
  - OpenForge.Cryptography.LibOqs.KEM.Kem.IsIndCca
  - OpenForge.Cryptography.LibOqs.KEM.Kem.PublicKeyLength
  - OpenForge.Cryptography.LibOqs.KEM.Kem.SecretKeyLength
  - OpenForge.Cryptography.LibOqs.KEM.Kem.SharedSecretLength
  langs:
  - csharp
  - vb
  name: Kem
  nameWithType: Kem
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem
  type: Class
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: Kem
    path: src/KEM/Kem.cs
    startLine: 9
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: >-
    High-level wrapper for LibOQS Key Encapsulation Mechanism (KEM) operations.

    This class provides a user-friendly interface for post-quantum key exchange operations.

    KEM algorithms are used to securely establish shared secrets between parties.
  example: []
  syntax:
    content: 'public sealed class Kem : IDisposable'
    content.vb: Public NotInheritable Class Kem Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.AlgorithmName
  commentId: P:OpenForge.Cryptography.LibOqs.KEM.Kem.AlgorithmName
  id: AlgorithmName
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: AlgorithmName
  nameWithType: Kem.AlgorithmName
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.AlgorithmName
  type: Property
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: AlgorithmName
    path: src/KEM/Kem.cs
    startLine: 19
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: Gets the name of the KEM algorithm used by this instance.
  example: []
  syntax:
    content: public string AlgorithmName { get; }
    parameters: []
    return:
      type: System.String
      description: The algorithm identifier string.
    content.vb: Public ReadOnly Property AlgorithmName As String
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.AlgorithmName*
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.PublicKeyLength
  commentId: P:OpenForge.Cryptography.LibOqs.KEM.Kem.PublicKeyLength
  id: PublicKeyLength
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: PublicKeyLength
  nameWithType: Kem.PublicKeyLength
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.PublicKeyLength
  type: Property
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: PublicKeyLength
    path: src/KEM/Kem.cs
    startLine: 25
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: Gets the length of public keys in bytes for this KEM algorithm.
  example: []
  syntax:
    content: public int PublicKeyLength { get; }
    parameters: []
    return:
      type: System.Int32
      description: The public key length in bytes.
    content.vb: Public Property PublicKeyLength As Integer
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.PublicKeyLength*
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.SecretKeyLength
  commentId: P:OpenForge.Cryptography.LibOqs.KEM.Kem.SecretKeyLength
  id: SecretKeyLength
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: SecretKeyLength
  nameWithType: Kem.SecretKeyLength
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.SecretKeyLength
  type: Property
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SecretKeyLength
    path: src/KEM/Kem.cs
    startLine: 31
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: Gets the length of secret keys in bytes for this KEM algorithm.
  example: []
  syntax:
    content: public int SecretKeyLength { get; }
    parameters: []
    return:
      type: System.Int32
      description: The secret key length in bytes.
    content.vb: Public Property SecretKeyLength As Integer
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.SecretKeyLength*
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.CiphertextLength
  commentId: P:OpenForge.Cryptography.LibOqs.KEM.Kem.CiphertextLength
  id: CiphertextLength
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: CiphertextLength
  nameWithType: Kem.CiphertextLength
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.CiphertextLength
  type: Property
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: CiphertextLength
    path: src/KEM/Kem.cs
    startLine: 37
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: Gets the length of ciphertext in bytes for this KEM algorithm.
  example: []
  syntax:
    content: public int CiphertextLength { get; }
    parameters: []
    return:
      type: System.Int32
      description: The ciphertext length in bytes.
    content.vb: Public Property CiphertextLength As Integer
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.CiphertextLength*
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.SharedSecretLength
  commentId: P:OpenForge.Cryptography.LibOqs.KEM.Kem.SharedSecretLength
  id: SharedSecretLength
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: SharedSecretLength
  nameWithType: Kem.SharedSecretLength
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.SharedSecretLength
  type: Property
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SharedSecretLength
    path: src/KEM/Kem.cs
    startLine: 43
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: Gets the length of shared secrets in bytes for this KEM algorithm.
  example: []
  syntax:
    content: public int SharedSecretLength { get; }
    parameters: []
    return:
      type: System.Int32
      description: The shared secret length in bytes.
    content.vb: Public Property SharedSecretLength As Integer
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.SharedSecretLength*
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.ClaimedNistLevel
  commentId: P:OpenForge.Cryptography.LibOqs.KEM.Kem.ClaimedNistLevel
  id: ClaimedNistLevel
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: ClaimedNistLevel
  nameWithType: Kem.ClaimedNistLevel
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.ClaimedNistLevel
  type: Property
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ClaimedNistLevel
    path: src/KEM/Kem.cs
    startLine: 49
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: Gets the NIST security level claimed by this KEM algorithm.
  example: []
  syntax:
    content: public byte ClaimedNistLevel { get; }
    parameters: []
    return:
      type: System.Byte
      description: The NIST security level (1, 2, 3, or 5).
    content.vb: Public Property ClaimedNistLevel As Byte
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.ClaimedNistLevel*
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.IsIndCca
  commentId: P:OpenForge.Cryptography.LibOqs.KEM.Kem.IsIndCca
  id: IsIndCca
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: IsIndCca
  nameWithType: Kem.IsIndCca
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.IsIndCca
  type: Property
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: IsIndCca
    path: src/KEM/Kem.cs
    startLine: 56
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: >-
    Gets a value indicating whether this KEM algorithm provides IND-CCA security.

    IND-CCA (Indistinguishability under Chosen Ciphertext Attack) is the standard security requirement for KEMs.
  example: []
  syntax:
    content: public bool IsIndCca { get; }
    parameters: []
    return:
      type: System.Boolean
      description: True if the algorithm provides IND-CCA security, false otherwise.
    content.vb: Public Property IsIndCca As Boolean
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.IsIndCca*
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.#ctor(System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.KEM.Kem.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: Kem(string)
  nameWithType: Kem.Kem(string)
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.Kem(string)
  type: Constructor
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: .ctor
    path: src/KEM/Kem.cs
    startLine: 66
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: Initializes a new instance of the KEM class with the specified algorithm.
  example: []
  syntax:
    content: public Kem(string algorithmName)
    parameters:
    - id: algorithmName
      type: System.String
      description: The name of the KEM algorithm to use.
    content.vb: Public Sub New(algorithmName As String)
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if algorithmName is null.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Thrown if the algorithm is not supported or enabled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the KEM instance could not be created.
  nameWithType.vb: Kem.New(String)
  fullName.vb: OpenForge.Cryptography.LibOqs.KEM.Kem.New(String)
  name.vb: New(String)
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.GenerateKeyPair
  commentId: M:OpenForge.Cryptography.LibOqs.KEM.Kem.GenerateKeyPair
  id: GenerateKeyPair
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: GenerateKeyPair()
  nameWithType: Kem.GenerateKeyPair()
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.GenerateKeyPair()
  type: Method
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: GenerateKeyPair
    path: src/KEM/Kem.cs
    startLine: 91
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: >-
    Generates a new cryptographic key pair for this KEM algorithm.

    The secret key should be kept private and securely stored.
  example: []
  syntax:
    content: public (byte[] publicKey, byte[] secretKey) GenerateKeyPair()
    return:
      type: System.ValueTuple{System.Byte[],System.Byte[]}
      description: A tuple containing the public key and secret key as byte arrays.
    content.vb: Public Function GenerateKeyPair() As (publicKey As Byte(), secretKey As Byte())
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.GenerateKeyPair*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if this instance has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if key pair generation fails.
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.Encapsulate(System.Byte[])
  commentId: M:OpenForge.Cryptography.LibOqs.KEM.Kem.Encapsulate(System.Byte[])
  id: Encapsulate(System.Byte[])
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: Encapsulate(byte[])
  nameWithType: Kem.Encapsulate(byte[])
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.Encapsulate(byte[])
  type: Method
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: Encapsulate
    path: src/KEM/Kem.cs
    startLine: 109
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: >-
    Encapsulates a shared secret using the recipient's public key.

    This creates both a ciphertext to send to the recipient and a shared secret for symmetric encryption.
  example: []
  syntax:
    content: public (byte[] ciphertext, byte[] sharedSecret) Encapsulate(byte[] publicKey)
    parameters:
    - id: publicKey
      type: System.Byte[]
      description: The recipient's public key.
    return:
      type: System.ValueTuple{System.Byte[],System.Byte[]}
      description: A tuple containing the ciphertext to send and the shared secret to use.
    content.vb: Public Function Encapsulate(publicKey As Byte()) As (ciphertext As Byte(), sharedSecret As Byte())
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.Encapsulate*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if this instance has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if publicKey is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the public key has an invalid length.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if encapsulation fails.
  nameWithType.vb: Kem.Encapsulate(Byte())
  fullName.vb: OpenForge.Cryptography.LibOqs.KEM.Kem.Encapsulate(Byte())
  name.vb: Encapsulate(Byte())
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.Decapsulate(System.Byte[],System.Byte[])
  commentId: M:OpenForge.Cryptography.LibOqs.KEM.Kem.Decapsulate(System.Byte[],System.Byte[])
  id: Decapsulate(System.Byte[],System.Byte[])
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: Decapsulate(byte[], byte[])
  nameWithType: Kem.Decapsulate(byte[], byte[])
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.Decapsulate(byte[], byte[])
  type: Method
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: Decapsulate
    path: src/KEM/Kem.cs
    startLine: 130
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: >-
    Decapsulates the shared secret from the ciphertext using the recipient's secret key.

    This recovers the same shared secret that was generated during encapsulation.
  example: []
  syntax:
    content: public byte[] Decapsulate(byte[] ciphertext, byte[] secretKey)
    parameters:
    - id: ciphertext
      type: System.Byte[]
      description: The ciphertext received from the sender.
    - id: secretKey
      type: System.Byte[]
      description: The recipient's secret key.
    return:
      type: System.Byte[]
      description: The shared secret that matches the one from encapsulation.
    content.vb: Public Function Decapsulate(ciphertext As Byte(), secretKey As Byte()) As Byte()
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.Decapsulate*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if this instance has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if ciphertext or secretKey is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if parameters have invalid lengths.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if decapsulation fails.
  nameWithType.vb: Kem.Decapsulate(Byte(), Byte())
  fullName.vb: OpenForge.Cryptography.LibOqs.KEM.Kem.Decapsulate(Byte(), Byte())
  name.vb: Decapsulate(Byte(), Byte())
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.GetSupportedAlgorithms
  commentId: M:OpenForge.Cryptography.LibOqs.KEM.Kem.GetSupportedAlgorithms
  id: GetSupportedAlgorithms
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: GetSupportedAlgorithms()
  nameWithType: Kem.GetSupportedAlgorithms()
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.GetSupportedAlgorithms()
  type: Method
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: GetSupportedAlgorithms
    path: src/KEM/Kem.cs
    startLine: 144
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: Gets all KEM algorithms that are currently supported and enabled in LibOQS.
  example: []
  syntax:
    content: public static string[] GetSupportedAlgorithms()
    return:
      type: System.String[]
      description: An array of algorithm identifier strings for supported KEM algorithms.
    content.vb: Public Shared Function GetSupportedAlgorithms() As String()
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.GetSupportedAlgorithms*
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.IsAlgorithmSupported(System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.KEM.Kem.IsAlgorithmSupported(System.String)
  id: IsAlgorithmSupported(System.String)
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: IsAlgorithmSupported(string)
  nameWithType: Kem.IsAlgorithmSupported(string)
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.IsAlgorithmSupported(string)
  type: Method
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: IsAlgorithmSupported
    path: src/KEM/Kem.cs
    startLine: 154
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: Determines whether a specific KEM algorithm is supported and available for use.
  example: []
  syntax:
    content: public static bool IsAlgorithmSupported(string algorithmName)
    parameters:
    - id: algorithmName
      type: System.String
      description: The name of the KEM algorithm to check.
    return:
      type: System.Boolean
      description: True if the algorithm is supported and enabled, false otherwise.
    content.vb: Public Shared Function IsAlgorithmSupported(algorithmName As String) As Boolean
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.IsAlgorithmSupported*
  nameWithType.vb: Kem.IsAlgorithmSupported(String)
  fullName.vb: OpenForge.Cryptography.LibOqs.KEM.Kem.IsAlgorithmSupported(String)
  name.vb: IsAlgorithmSupported(String)
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.Dispose
  commentId: M:OpenForge.Cryptography.LibOqs.KEM.Kem.Dispose
  id: Dispose
  parent: OpenForge.Cryptography.LibOqs.KEM.Kem
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Kem.Dispose()
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.Dispose()
  type: Method
  source:
    remote:
      path: src/KEM/Kem.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: Dispose
    path: src/KEM/Kem.cs
    startLine: 171
  assemblies:
  - OpenForge.Cryptography.LibOqs.KEM
  namespace: OpenForge.Cryptography.LibOqs.KEM
  summary: >-
    Disposes the KEM instance and releases all associated resources.

    After disposal, this instance cannot be used for further operations.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: OpenForge.Cryptography.LibOqs.KEM.Kem.Dispose*
  implements:
  - System.IDisposable.Dispose
references:
- uid: OpenForge.Cryptography.LibOqs.KEM
  commentId: N:OpenForge.Cryptography.LibOqs.KEM
  href: OpenForge.html
  name: OpenForge.Cryptography.LibOqs.KEM
  nameWithType: OpenForge.Cryptography.LibOqs.KEM
  fullName: OpenForge.Cryptography.LibOqs.KEM
  spec.csharp:
  - uid: OpenForge
    name: OpenForge
    href: OpenForge.html
  - name: .
  - uid: OpenForge.Cryptography
    name: Cryptography
    href: OpenForge.Cryptography.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs
    name: LibOqs
    href: OpenForge.Cryptography.LibOqs.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs.KEM
    name: KEM
    href: OpenForge.Cryptography.LibOqs.KEM.html
  spec.vb:
  - uid: OpenForge
    name: OpenForge
    href: OpenForge.html
  - name: .
  - uid: OpenForge.Cryptography
    name: Cryptography
    href: OpenForge.Cryptography.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs
    name: LibOqs
    href: OpenForge.Cryptography.LibOqs.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs.KEM
    name: KEM
    href: OpenForge.Cryptography.LibOqs.KEM.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.AlgorithmName*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.AlgorithmName
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_AlgorithmName
  name: AlgorithmName
  nameWithType: Kem.AlgorithmName
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.AlgorithmName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.PublicKeyLength*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.PublicKeyLength
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_PublicKeyLength
  name: PublicKeyLength
  nameWithType: Kem.PublicKeyLength
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.PublicKeyLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.SecretKeyLength*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.SecretKeyLength
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_SecretKeyLength
  name: SecretKeyLength
  nameWithType: Kem.SecretKeyLength
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.SecretKeyLength
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.CiphertextLength*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.CiphertextLength
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_CiphertextLength
  name: CiphertextLength
  nameWithType: Kem.CiphertextLength
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.CiphertextLength
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.SharedSecretLength*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.SharedSecretLength
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_SharedSecretLength
  name: SharedSecretLength
  nameWithType: Kem.SharedSecretLength
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.SharedSecretLength
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.ClaimedNistLevel*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.ClaimedNistLevel
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_ClaimedNistLevel
  name: ClaimedNistLevel
  nameWithType: Kem.ClaimedNistLevel
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.ClaimedNistLevel
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.IsIndCca*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.IsIndCca
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_IsIndCca
  name: IsIndCca
  nameWithType: Kem.IsIndCca
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.IsIndCca
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.notsupportedexception
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.#ctor*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.#ctor
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem__ctor_System_String_
  name: Kem
  nameWithType: Kem.Kem
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.Kem
  nameWithType.vb: Kem.New
  fullName.vb: OpenForge.Cryptography.LibOqs.KEM.Kem.New
  name.vb: New
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.objectdisposedexception
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.GenerateKeyPair*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.GenerateKeyPair
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_GenerateKeyPair
  name: GenerateKeyPair
  nameWithType: Kem.GenerateKeyPair
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.GenerateKeyPair
- uid: System.ValueTuple{System.Byte[],System.Byte[]}
  commentId: T:System.ValueTuple{System.Byte[],System.Byte[]}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: (byte[] publicKey, byte[] secretKey)
  nameWithType: (byte[] publicKey, byte[] secretKey)
  fullName: (byte[] publicKey, byte[] secretKey)
  nameWithType.vb: (publicKey As Byte(), secretKey As Byte())
  fullName.vb: (publicKey As Byte(), secretKey As Byte())
  name.vb: (publicKey As Byte(), secretKey As Byte())
  spec.csharp:
  - name: (
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: " "
  - uid: System.ValueTuple{System.Byte[],System.Byte[]}.publicKey
    name: publicKey
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.byte[],system.byte[]-.publickey
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: " "
  - uid: System.ValueTuple{System.Byte[],System.Byte[]}.secretKey
    name: secretKey
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.byte[],system.byte[]-.secretkey
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Byte[],System.Byte[]}.publicKey
    name: publicKey
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.byte[],system.byte[]-.publickey
  - name: " "
  - name: As
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Byte[],System.Byte[]}.secretKey
    name: secretKey
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.byte[],system.byte[]-.secretkey
  - name: " "
  - name: As
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.Encapsulate*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.Encapsulate
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_Encapsulate_System_Byte___
  name: Encapsulate
  nameWithType: Kem.Encapsulate
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.Encapsulate
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.Decapsulate*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.Decapsulate
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_Decapsulate_System_Byte___System_Byte___
  name: Decapsulate
  nameWithType: Kem.Decapsulate
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.Decapsulate
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.GetSupportedAlgorithms*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.GetSupportedAlgorithms
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_GetSupportedAlgorithms
  name: GetSupportedAlgorithms
  nameWithType: Kem.GetSupportedAlgorithms
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.GetSupportedAlgorithms
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.IsAlgorithmSupported*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.IsAlgorithmSupported
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_IsAlgorithmSupported_System_String_
  name: IsAlgorithmSupported
  nameWithType: Kem.IsAlgorithmSupported
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.IsAlgorithmSupported
- uid: OpenForge.Cryptography.LibOqs.KEM.Kem.Dispose*
  commentId: Overload:OpenForge.Cryptography.LibOqs.KEM.Kem.Dispose
  href: OpenForge.Cryptography.LibOqs.KEM.Kem.html#OpenForge_Cryptography_LibOqs_KEM_Kem_Dispose
  name: Dispose
  nameWithType: Kem.Dispose
  fullName: OpenForge.Cryptography.LibOqs.KEM.Kem.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
