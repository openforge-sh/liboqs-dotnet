### YamlMime:ManagedReference
items:
- uid: OpenForge.Cryptography.LibOqs.Core.SecureMemory
  commentId: T:OpenForge.Cryptography.LibOqs.Core.SecureMemory
  id: SecureMemory
  parent: OpenForge.Cryptography.LibOqs.Core
  children:
  - OpenForge.Cryptography.LibOqs.Core.SecureMemory.CreateSecureArray(System.Int32)
  - OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureAlloc(System.UIntPtr)
  - OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear(System.Byte[])
  - OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear(System.Span{System.Byte})
  - OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureFree(System.IntPtr,System.UIntPtr)
  langs:
  - csharp
  - vb
  name: SecureMemory
  nameWithType: SecureMemory
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureMemory
  type: Class
  source:
    remote:
      path: src/Core/SecureMemory.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SecureMemory
    path: src/Core/SecureMemory.cs
    startLine: 5
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: Provides cryptographically secure memory operations using LibOQS native functions.
  example: []
  syntax:
    content: public static class SecureMemory
    content.vb: Public Module SecureMemory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear(System.Byte[])
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear(System.Byte[])
  id: SecureClear(System.Byte[])
  parent: OpenForge.Cryptography.LibOqs.Core.SecureMemory
  langs:
  - csharp
  - vb
  name: SecureClear(byte[]?)
  nameWithType: SecureMemory.SecureClear(byte[]?)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear(byte[]?)
  type: Method
  source:
    remote:
      path: src/Core/SecureMemory.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SecureClear
    path: src/Core/SecureMemory.cs
    startLine: 12
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Securely clears a byte array using LibOQS's OQS_MEM_cleanse function.

    This ensures the memory is cryptographically wiped and cannot be optimized away by the compiler.
  example: []
  syntax:
    content: public static void SecureClear(byte[]? data)
    parameters:
    - id: data
      type: System.Byte[]
      description: The byte array to securely clear. Can be null.
    content.vb: Public Shared Sub SecureClear(data As Byte())
  overload: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear*
  nameWithType.vb: SecureMemory.SecureClear(Byte())
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear(Byte())
  name.vb: SecureClear(Byte())
- uid: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear(System.Span{System.Byte})
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear(System.Span{System.Byte})
  id: SecureClear(System.Span{System.Byte})
  parent: OpenForge.Cryptography.LibOqs.Core.SecureMemory
  langs:
  - csharp
  - vb
  name: SecureClear(Span<byte>)
  nameWithType: SecureMemory.SecureClear(Span<byte>)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear(System.Span<byte>)
  type: Method
  source:
    remote:
      path: src/Core/SecureMemory.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SecureClear
    path: src/Core/SecureMemory.cs
    startLine: 28
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Securely clears a span of bytes using LibOQS's OQS_MEM_cleanse function.

    This ensures the memory is cryptographically wiped and cannot be optimized away by the compiler.
  example: []
  syntax:
    content: public static void SecureClear(Span<byte> data)
    parameters:
    - id: data
      type: System.Span{System.Byte}
      description: The span of bytes to securely clear.
    content.vb: Public Shared Sub SecureClear(data As Span(Of Byte))
  overload: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear*
  nameWithType.vb: SecureMemory.SecureClear(Span(Of Byte))
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear(System.Span(Of Byte))
  name.vb: SecureClear(Span(Of Byte))
- uid: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureAlloc(System.UIntPtr)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureAlloc(System.UIntPtr)
  id: SecureAlloc(System.UIntPtr)
  parent: OpenForge.Cryptography.LibOqs.Core.SecureMemory
  langs:
  - csharp
  - vb
  name: SecureAlloc(nuint)
  nameWithType: SecureMemory.SecureAlloc(nuint)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureAlloc(nuint)
  type: Method
  source:
    remote:
      path: src/Core/SecureMemory.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SecureAlloc
    path: src/Core/SecureMemory.cs
    startLine: 45
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Allocates secure memory using LibOQS's memory allocator.

    Memory allocated with this method should be freed with SecureFree.
  example: []
  syntax:
    content: public static nint SecureAlloc(nuint size)
    parameters:
    - id: size
      type: System.UIntPtr
      description: The size in bytes to allocate.
    return:
      type: System.IntPtr
      description: A pointer to the allocated memory, or IntPtr.Zero if allocation failed.
    content.vb: Public Shared Function SecureAlloc(size As UIntPtr) As IntPtr
  overload: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureAlloc*
  nameWithType.vb: SecureMemory.SecureAlloc(UIntPtr)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureAlloc(System.UIntPtr)
  name.vb: SecureAlloc(UIntPtr)
- uid: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureFree(System.IntPtr,System.UIntPtr)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureFree(System.IntPtr,System.UIntPtr)
  id: SecureFree(System.IntPtr,System.UIntPtr)
  parent: OpenForge.Cryptography.LibOqs.Core.SecureMemory
  langs:
  - csharp
  - vb
  name: SecureFree(nint, nuint)
  nameWithType: SecureMemory.SecureFree(nint, nuint)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureFree(nint, nuint)
  type: Method
  source:
    remote:
      path: src/Core/SecureMemory.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SecureFree
    path: src/Core/SecureMemory.cs
    startLine: 60
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Securely frees memory allocated with SecureAlloc.

    The memory is cryptographically wiped before being freed.
  example: []
  syntax:
    content: public static void SecureFree(nint memPtr, nuint size)
    parameters:
    - id: memPtr
      type: System.IntPtr
      description: Pointer to the memory to free.
    - id: size
      type: System.UIntPtr
      description: Size of the memory block in bytes.
    content.vb: Public Shared Sub SecureFree(memPtr As IntPtr, size As UIntPtr)
  overload: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureFree*
  nameWithType.vb: SecureMemory.SecureFree(IntPtr, UIntPtr)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureFree(System.IntPtr, System.UIntPtr)
  name.vb: SecureFree(IntPtr, UIntPtr)
- uid: OpenForge.Cryptography.LibOqs.Core.SecureMemory.CreateSecureArray(System.Int32)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecureMemory.CreateSecureArray(System.Int32)
  id: CreateSecureArray(System.Int32)
  parent: OpenForge.Cryptography.LibOqs.Core.SecureMemory
  langs:
  - csharp
  - vb
  name: CreateSecureArray(int)
  nameWithType: SecureMemory.CreateSecureArray(int)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureMemory.CreateSecureArray(int)
  type: Method
  source:
    remote:
      path: src/Core/SecureMemory.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: CreateSecureArray
    path: src/Core/SecureMemory.cs
    startLine: 74
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: Creates a secure byte array that will be automatically cleared when disposed.
  example: []
  syntax:
    content: public static SecureByteArray CreateSecureArray(int size)
    parameters:
    - id: size
      type: System.Int32
      description: The size of the array to create.
    return:
      type: OpenForge.Cryptography.LibOqs.Core.SecureByteArray
      description: A SecureByteArray instance.
    content.vb: Public Shared Function CreateSecureArray(size As Integer) As SecureByteArray
  overload: OpenForge.Cryptography.LibOqs.Core.SecureMemory.CreateSecureArray*
  nameWithType.vb: SecureMemory.CreateSecureArray(Integer)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecureMemory.CreateSecureArray(Integer)
  name.vb: CreateSecureArray(Integer)
references:
- uid: OpenForge.Cryptography.LibOqs.Core
  commentId: N:OpenForge.Cryptography.LibOqs.Core
  href: OpenForge.html
  name: OpenForge.Cryptography.LibOqs.Core
  nameWithType: OpenForge.Cryptography.LibOqs.Core
  fullName: OpenForge.Cryptography.LibOqs.Core
  spec.csharp:
  - uid: OpenForge
    name: OpenForge
    href: OpenForge.html
  - name: .
  - uid: OpenForge.Cryptography
    name: Cryptography
    href: OpenForge.Cryptography.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs
    name: LibOqs
    href: OpenForge.Cryptography.LibOqs.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs.Core
    name: Core
    href: OpenForge.Cryptography.LibOqs.Core.html
  spec.vb:
  - uid: OpenForge
    name: OpenForge
    href: OpenForge.html
  - name: .
  - uid: OpenForge.Cryptography
    name: Cryptography
    href: OpenForge.Cryptography.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs
    name: LibOqs
    href: OpenForge.Cryptography.LibOqs.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs.Core
    name: Core
    href: OpenForge.Cryptography.LibOqs.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear
  href: OpenForge.Cryptography.LibOqs.Core.SecureMemory.html#OpenForge_Cryptography_LibOqs_Core_SecureMemory_SecureClear_System_Byte___
  name: SecureClear
  nameWithType: SecureMemory.SecureClear
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureClear
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: System.Span{System.Byte}
  commentId: T:System.Span{System.Byte}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<byte>
  nameWithType: Span<byte>
  fullName: System.Span<byte>
  nameWithType.vb: Span(Of Byte)
  fullName.vb: System.Span(Of Byte)
  name.vb: Span(Of Byte)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureAlloc*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureAlloc
  href: OpenForge.Cryptography.LibOqs.Core.SecureMemory.html#OpenForge_Cryptography_LibOqs_Core_SecureMemory_SecureAlloc_System_UIntPtr_
  name: SecureAlloc
  nameWithType: SecureMemory.SecureAlloc
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureAlloc
- uid: System.UIntPtr
  commentId: T:System.UIntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uintptr
  name: nuint
  nameWithType: nuint
  fullName: nuint
  nameWithType.vb: UIntPtr
  fullName.vb: System.UIntPtr
  name.vb: UIntPtr
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.intptr
  name: nint
  nameWithType: nint
  fullName: nint
  nameWithType.vb: IntPtr
  fullName.vb: System.IntPtr
  name.vb: IntPtr
- uid: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureFree*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureFree
  href: OpenForge.Cryptography.LibOqs.Core.SecureMemory.html#OpenForge_Cryptography_LibOqs_Core_SecureMemory_SecureFree_System_IntPtr_System_UIntPtr_
  name: SecureFree
  nameWithType: SecureMemory.SecureFree
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureMemory.SecureFree
- uid: OpenForge.Cryptography.LibOqs.Core.SecureMemory.CreateSecureArray*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecureMemory.CreateSecureArray
  href: OpenForge.Cryptography.LibOqs.Core.SecureMemory.html#OpenForge_Cryptography_LibOqs_Core_SecureMemory_CreateSecureArray_System_Int32_
  name: CreateSecureArray
  nameWithType: SecureMemory.CreateSecureArray
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureMemory.CreateSecureArray
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: OpenForge.Cryptography.LibOqs.Core.SecureByteArray
  commentId: T:OpenForge.Cryptography.LibOqs.Core.SecureByteArray
  parent: OpenForge.Cryptography.LibOqs.Core
  href: OpenForge.Cryptography.LibOqs.Core.SecureByteArray.html
  name: SecureByteArray
  nameWithType: SecureByteArray
  fullName: OpenForge.Cryptography.LibOqs.Core.SecureByteArray
