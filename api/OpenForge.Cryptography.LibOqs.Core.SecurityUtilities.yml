### YamlMime:ManagedReference
items:
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  commentId: T:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  id: SecurityUtilities
  parent: OpenForge.Cryptography.LibOqs.Core
  children:
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeCopy(System.Boolean,System.ReadOnlySpan{System.Byte},System.Span{System.Byte})
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals(System.Byte[],System.Byte[])
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeSelect(System.Boolean,System.Byte,System.Byte)
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy(System.Byte[])
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy(System.ReadOnlySpan{System.Byte})
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.FromHexString(System.String)
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ToHexString(System.ReadOnlySpan{System.Byte})
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptySpan(System.ReadOnlySpan{System.Byte},System.String)
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptyString(System.String,System.String)
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength(System.Byte[],System.Int32,System.String)
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength(System.ReadOnlySpan{System.Byte},System.Int32,System.String)
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange(System.Byte[],System.Int32,System.Int32,System.String)
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,System.String)
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateRandomBytesEntropy(System.ReadOnlySpan{System.Byte},System.String)
  - OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateSize(System.Int32,System.Int32,System.String)
  langs:
  - csharp
  - vb
  name: SecurityUtilities
  nameWithType: SecurityUtilities
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  type: Class
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: SecurityUtilities
    path: src/Core/SecurityUtilities.cs
    startLine: 10
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Provides security-focused utilities including constant-time operations, secure comparisons,

    input validation, and entropy checks for cryptographic operations.

    All timing-sensitive operations are designed to prevent side-channel attacks.
  example: []
  syntax:
    content: public static class SecurityUtilities
    content.vb: Public Module SecurityUtilities
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: ConstantTimeEquals(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ConstantTimeEquals(ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  nameWithType: SecurityUtilities.ConstantTimeEquals(ReadOnlySpan<byte>, ReadOnlySpan<byte>)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals(System.ReadOnlySpan<byte>, System.ReadOnlySpan<byte>)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ConstantTimeEquals
    path: src/Core/SecurityUtilities.cs
    startLine: 19
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Performs a constant-time comparison of two byte arrays to prevent timing attacks.

    This operation takes the same amount of time regardless of where the arrays differ.
  example: []
  syntax:
    content: public static bool ConstantTimeEquals(ReadOnlySpan<byte> a, ReadOnlySpan<byte> b)
    parameters:
    - id: a
      type: System.ReadOnlySpan{System.Byte}
      description: First byte array to compare.
    - id: b
      type: System.ReadOnlySpan{System.Byte}
      description: Second byte array to compare.
    return:
      type: System.Boolean
      description: True if the arrays are equal, false otherwise.
    content.vb: Public Shared Function ConstantTimeEquals(a As ReadOnlySpan(Of Byte), b As ReadOnlySpan(Of Byte)) As Boolean
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals*
  nameWithType.vb: SecurityUtilities.ConstantTimeEquals(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals(System.ReadOnlySpan(Of Byte), System.ReadOnlySpan(Of Byte))
  name.vb: ConstantTimeEquals(ReadOnlySpan(Of Byte), ReadOnlySpan(Of Byte))
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals(System.Byte[],System.Byte[])
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals(System.Byte[],System.Byte[])
  id: ConstantTimeEquals(System.Byte[],System.Byte[])
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ConstantTimeEquals(byte[]?, byte[]?)
  nameWithType: SecurityUtilities.ConstantTimeEquals(byte[]?, byte[]?)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals(byte[]?, byte[]?)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ConstantTimeEquals
    path: src/Core/SecurityUtilities.cs
    startLine: 41
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Performs a constant-time comparison of two byte arrays to prevent timing attacks.

    This operation takes the same amount of time regardless of where the arrays differ.
  example: []
  syntax:
    content: public static bool ConstantTimeEquals(byte[]? a, byte[]? b)
    parameters:
    - id: a
      type: System.Byte[]
      description: First byte array to compare. Can be null.
    - id: b
      type: System.Byte[]
      description: Second byte array to compare. Can be null.
    return:
      type: System.Boolean
      description: True if the arrays are equal (including both being null), false otherwise.
    content.vb: Public Shared Function ConstantTimeEquals(a As Byte(), b As Byte()) As Boolean
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals*
  nameWithType.vb: SecurityUtilities.ConstantTimeEquals(Byte(), Byte())
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals(Byte(), Byte())
  name.vb: ConstantTimeEquals(Byte(), Byte())
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeSelect(System.Boolean,System.Byte,System.Byte)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeSelect(System.Boolean,System.Byte,System.Byte)
  id: ConstantTimeSelect(System.Boolean,System.Byte,System.Byte)
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ConstantTimeSelect(bool, byte, byte)
  nameWithType: SecurityUtilities.ConstantTimeSelect(bool, byte, byte)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeSelect(bool, byte, byte)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ConstantTimeSelect
    path: src/Core/SecurityUtilities.cs
    startLine: 61
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Constant-time conditional selection. Returns a if condition is true, b otherwise.

    The execution time is independent of the condition value.
  example: []
  syntax:
    content: public static byte ConstantTimeSelect(bool condition, byte a, byte b)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to evaluate.
    - id: a
      type: System.Byte
      description: Value to return if condition is true.
    - id: b
      type: System.Byte
      description: Value to return if condition is false.
    return:
      type: System.Byte
      description: a if condition is true, b otherwise.
    content.vb: Public Shared Function ConstantTimeSelect(condition As Boolean, a As Byte, b As Byte) As Byte
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeSelect*
  nameWithType.vb: SecurityUtilities.ConstantTimeSelect(Boolean, Byte, Byte)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeSelect(Boolean, Byte, Byte)
  name.vb: ConstantTimeSelect(Boolean, Byte, Byte)
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeCopy(System.Boolean,System.ReadOnlySpan{System.Byte},System.Span{System.Byte})
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeCopy(System.Boolean,System.ReadOnlySpan{System.Byte},System.Span{System.Byte})
  id: ConstantTimeCopy(System.Boolean,System.ReadOnlySpan{System.Byte},System.Span{System.Byte})
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ConstantTimeCopy(bool, ReadOnlySpan<byte>, Span<byte>)
  nameWithType: SecurityUtilities.ConstantTimeCopy(bool, ReadOnlySpan<byte>, Span<byte>)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeCopy(bool, System.ReadOnlySpan<byte>, System.Span<byte>)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ConstantTimeCopy
    path: src/Core/SecurityUtilities.cs
    startLine: 79
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Constant-time conditional copy. Copies source to destination if condition is true.

    The execution time is independent of the condition value.
  example: []
  syntax:
    content: public static void ConstantTimeCopy(bool condition, ReadOnlySpan<byte> source, Span<byte> destination)
    parameters:
    - id: condition
      type: System.Boolean
      description: The condition to evaluate.
    - id: source
      type: System.ReadOnlySpan{System.Byte}
      description: Source span to copy from.
    - id: destination
      type: System.Span{System.Byte}
      description: Destination span to copy to.
    content.vb: Public Shared Sub ConstantTimeCopy(condition As Boolean, source As ReadOnlySpan(Of Byte), destination As Span(Of Byte))
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeCopy*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if spans have different lengths.
  nameWithType.vb: SecurityUtilities.ConstantTimeCopy(Boolean, ReadOnlySpan(Of Byte), Span(Of Byte))
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeCopy(Boolean, System.ReadOnlySpan(Of Byte), System.Span(Of Byte))
  name.vb: ConstantTimeCopy(Boolean, ReadOnlySpan(Of Byte), Span(Of Byte))
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength(System.Byte[],System.Int32,System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength(System.Byte[],System.Int32,System.String)
  id: ValidateParameterLength(System.Byte[],System.Int32,System.String)
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ValidateParameterLength(byte[]?, int, string)
  nameWithType: SecurityUtilities.ValidateParameterLength(byte[]?, int, string)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength(byte[]?, int, string)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ValidateParameterLength
    path: src/Core/SecurityUtilities.cs
    startLine: 105
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Validates that input parameters are within expected cryptographic bounds.

    This helps prevent buffer overflows and invalid operations.
  example: []
  syntax:
    content: public static void ValidateParameterLength(byte[]? data, int expectedLength, string parameterName)
    parameters:
    - id: data
      type: System.Byte[]
      description: The data to validate.
    - id: expectedLength
      type: System.Int32
      description: The expected length of the data.
    - id: parameterName
      type: System.String
      description: The name of the parameter for exception messages.
    content.vb: Public Shared Sub ValidateParameterLength(data As Byte(), expectedLength As Integer, parameterName As String)
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if data is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if data length doesn't match expected length.
  nameWithType.vb: SecurityUtilities.ValidateParameterLength(Byte(), Integer, String)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength(Byte(), Integer, String)
  name.vb: ValidateParameterLength(Byte(), Integer, String)
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength(System.ReadOnlySpan{System.Byte},System.Int32,System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength(System.ReadOnlySpan{System.Byte},System.Int32,System.String)
  id: ValidateParameterLength(System.ReadOnlySpan{System.Byte},System.Int32,System.String)
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ValidateParameterLength(ReadOnlySpan<byte>, int, string)
  nameWithType: SecurityUtilities.ValidateParameterLength(ReadOnlySpan<byte>, int, string)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength(System.ReadOnlySpan<byte>, int, string)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ValidateParameterLength
    path: src/Core/SecurityUtilities.cs
    startLine: 122
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Validates that input parameters are within expected cryptographic bounds.

    This helps prevent buffer overflows and invalid operations.
  example: []
  syntax:
    content: public static void ValidateParameterLength(ReadOnlySpan<byte> data, int expectedLength, string parameterName)
    parameters:
    - id: data
      type: System.ReadOnlySpan{System.Byte}
      description: The data to validate.
    - id: expectedLength
      type: System.Int32
      description: The expected length of the data.
    - id: parameterName
      type: System.String
      description: The name of the parameter for exception messages.
    content.vb: Public Shared Sub ValidateParameterLength(data As ReadOnlySpan(Of Byte), expectedLength As Integer, parameterName As String)
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if data length doesn't match expected length.
  nameWithType.vb: SecurityUtilities.ValidateParameterLength(ReadOnlySpan(Of Byte), Integer, String)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength(System.ReadOnlySpan(Of Byte), Integer, String)
  name.vb: ValidateParameterLength(ReadOnlySpan(Of Byte), Integer, String)
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange(System.Byte[],System.Int32,System.Int32,System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange(System.Byte[],System.Int32,System.Int32,System.String)
  id: ValidateParameterLengthRange(System.Byte[],System.Int32,System.Int32,System.String)
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ValidateParameterLengthRange(byte[]?, int, int, string)
  nameWithType: SecurityUtilities.ValidateParameterLengthRange(byte[]?, int, int, string)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange(byte[]?, int, int, string)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ValidateParameterLengthRange
    path: src/Core/SecurityUtilities.cs
    startLine: 138
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Validates that input parameters are within acceptable cryptographic bounds.

    This helps prevent buffer overflows and invalid operations.
  example: []
  syntax:
    content: public static void ValidateParameterLengthRange(byte[]? data, int minLength, int maxLength, string parameterName)
    parameters:
    - id: data
      type: System.Byte[]
      description: The data to validate.
    - id: minLength
      type: System.Int32
      description: The minimum acceptable length of the data.
    - id: maxLength
      type: System.Int32
      description: The maximum acceptable length of the data.
    - id: parameterName
      type: System.String
      description: The name of the parameter for exception messages.
    content.vb: Public Shared Sub ValidateParameterLengthRange(data As Byte(), minLength As Integer, maxLength As Integer, parameterName As String)
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if data is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if data length is outside acceptable bounds.
  nameWithType.vb: SecurityUtilities.ValidateParameterLengthRange(Byte(), Integer, Integer, String)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange(Byte(), Integer, Integer, String)
  name.vb: ValidateParameterLengthRange(Byte(), Integer, Integer, String)
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,System.String)
  id: ValidateParameterLengthRange(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,System.String)
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ValidateParameterLengthRange(ReadOnlySpan<byte>, int, int, string)
  nameWithType: SecurityUtilities.ValidateParameterLengthRange(ReadOnlySpan<byte>, int, int, string)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange(System.ReadOnlySpan<byte>, int, int, string)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ValidateParameterLengthRange
    path: src/Core/SecurityUtilities.cs
    startLine: 156
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Validates that input parameters are within acceptable cryptographic bounds.

    This helps prevent buffer overflows and invalid operations.
  example: []
  syntax:
    content: public static void ValidateParameterLengthRange(ReadOnlySpan<byte> data, int minLength, int maxLength, string parameterName)
    parameters:
    - id: data
      type: System.ReadOnlySpan{System.Byte}
      description: The data to validate.
    - id: minLength
      type: System.Int32
      description: The minimum acceptable length of the data.
    - id: maxLength
      type: System.Int32
      description: The maximum acceptable length of the data.
    - id: parameterName
      type: System.String
      description: The name of the parameter for exception messages.
    content.vb: Public Shared Sub ValidateParameterLengthRange(data As ReadOnlySpan(Of Byte), minLength As Integer, maxLength As Integer, parameterName As String)
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if data length is outside acceptable bounds.
  nameWithType.vb: SecurityUtilities.ValidateParameterLengthRange(ReadOnlySpan(Of Byte), Integer, Integer, String)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange(System.ReadOnlySpan(Of Byte), Integer, Integer, String)
  name.vb: ValidateParameterLengthRange(ReadOnlySpan(Of Byte), Integer, Integer, String)
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateSize(System.Int32,System.Int32,System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateSize(System.Int32,System.Int32,System.String)
  id: ValidateSize(System.Int32,System.Int32,System.String)
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ValidateSize(int, int, string)
  nameWithType: SecurityUtilities.ValidateSize(int, int, string)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateSize(int, int, string)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ValidateSize
    path: src/Core/SecurityUtilities.cs
    startLine: 169
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: Validates that a size parameter is within reasonable bounds to prevent excessive memory allocation.
  example: []
  syntax:
    content: public static void ValidateSize(int size, int maxSize, string parameterName)
    parameters:
    - id: size
      type: System.Int32
      description: The size to validate.
    - id: maxSize
      type: System.Int32
      description: The maximum acceptable size.
    - id: parameterName
      type: System.String
      description: The name of the parameter for exception messages.
    content.vb: Public Shared Sub ValidateSize(size As Integer, maxSize As Integer, parameterName As String)
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if size is negative or exceeds maximum.
  nameWithType.vb: SecurityUtilities.ValidateSize(Integer, Integer, String)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateSize(Integer, Integer, String)
  name.vb: ValidateSize(Integer, Integer, String)
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateRandomBytesEntropy(System.ReadOnlySpan{System.Byte},System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateRandomBytesEntropy(System.ReadOnlySpan{System.Byte},System.String)
  id: ValidateRandomBytesEntropy(System.ReadOnlySpan{System.Byte},System.String)
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ValidateRandomBytesEntropy(ReadOnlySpan<byte>, string)
  nameWithType: SecurityUtilities.ValidateRandomBytesEntropy(ReadOnlySpan<byte>, string)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateRandomBytesEntropy(System.ReadOnlySpan<byte>, string)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ValidateRandomBytesEntropy
    path: src/Core/SecurityUtilities.cs
    startLine: 185
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Validates that random bytes appear to have adequate entropy.

    This is a basic sanity check and not a comprehensive entropy test.
  example: []
  syntax:
    content: public static void ValidateRandomBytesEntropy(ReadOnlySpan<byte> randomBytes, string parameterName)
    parameters:
    - id: randomBytes
      type: System.ReadOnlySpan{System.Byte}
      description: The random bytes to validate.
    - id: parameterName
      type: System.String
      description: The name of the parameter for exception messages.
    content.vb: Public Shared Sub ValidateRandomBytesEntropy(randomBytes As ReadOnlySpan(Of Byte), parameterName As String)
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateRandomBytesEntropy*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the bytes appear to have insufficient entropy.
  nameWithType.vb: SecurityUtilities.ValidateRandomBytesEntropy(ReadOnlySpan(Of Byte), String)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateRandomBytesEntropy(System.ReadOnlySpan(Of Byte), String)
  name.vb: ValidateRandomBytesEntropy(ReadOnlySpan(Of Byte), String)
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy(System.Byte[])
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy(System.Byte[])
  id: CreateDefensiveCopy(System.Byte[])
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: CreateDefensiveCopy(byte[]?)
  nameWithType: SecurityUtilities.CreateDefensiveCopy(byte[]?)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy(byte[]?)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: CreateDefensiveCopy
    path: src/Core/SecurityUtilities.cs
    startLine: 247
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: Creates a defensive copy of a byte array to prevent external modification.
  example: []
  syntax:
    content: public static byte[]? CreateDefensiveCopy(byte[]? source)
    parameters:
    - id: source
      type: System.Byte[]
      description: The source array to copy.
    return:
      type: System.Byte[]
      description: A defensive copy of the source array, or null if source is null.
    content.vb: Public Shared Function CreateDefensiveCopy(source As Byte()) As Byte()
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy*
  nameWithType.vb: SecurityUtilities.CreateDefensiveCopy(Byte())
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy(Byte())
  name.vb: CreateDefensiveCopy(Byte())
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy(System.ReadOnlySpan{System.Byte})
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy(System.ReadOnlySpan{System.Byte})
  id: CreateDefensiveCopy(System.ReadOnlySpan{System.Byte})
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: CreateDefensiveCopy(ReadOnlySpan<byte>)
  nameWithType: SecurityUtilities.CreateDefensiveCopy(ReadOnlySpan<byte>)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy(System.ReadOnlySpan<byte>)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: CreateDefensiveCopy
    path: src/Core/SecurityUtilities.cs
    startLine: 257
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: Creates a defensive copy of a span into a new byte array.
  example: []
  syntax:
    content: public static byte[] CreateDefensiveCopy(ReadOnlySpan<byte> source)
    parameters:
    - id: source
      type: System.ReadOnlySpan{System.Byte}
      description: The source span to copy.
    return:
      type: System.Byte[]
      description: A new byte array containing a copy of the source data.
    content.vb: Public Shared Function CreateDefensiveCopy(source As ReadOnlySpan(Of Byte)) As Byte()
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy*
  nameWithType.vb: SecurityUtilities.CreateDefensiveCopy(ReadOnlySpan(Of Byte))
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy(System.ReadOnlySpan(Of Byte))
  name.vb: CreateDefensiveCopy(ReadOnlySpan(Of Byte))
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ToHexString(System.ReadOnlySpan{System.Byte})
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ToHexString(System.ReadOnlySpan{System.Byte})
  id: ToHexString(System.ReadOnlySpan{System.Byte})
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ToHexString(ReadOnlySpan<byte>)
  nameWithType: SecurityUtilities.ToHexString(ReadOnlySpan<byte>)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ToHexString(System.ReadOnlySpan<byte>)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ToHexString
    path: src/Core/SecurityUtilities.cs
    startLine: 268
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Securely converts a byte array to a hexadecimal string representation.

    This method is constant-time with respect to the data content to prevent timing attacks.
  example: []
  syntax:
    content: public static string ToHexString(ReadOnlySpan<byte> bytes)
    parameters:
    - id: bytes
      type: System.ReadOnlySpan{System.Byte}
      description: The byte array to convert.
    return:
      type: System.String
      description: A lowercase hexadecimal string representation.
    content.vb: Public Shared Function ToHexString(bytes As ReadOnlySpan(Of Byte)) As String
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ToHexString*
  nameWithType.vb: SecurityUtilities.ToHexString(ReadOnlySpan(Of Byte))
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ToHexString(System.ReadOnlySpan(Of Byte))
  name.vb: ToHexString(ReadOnlySpan(Of Byte))
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.FromHexString(System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.FromHexString(System.String)
  id: FromHexString(System.String)
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: FromHexString(string)
  nameWithType: SecurityUtilities.FromHexString(string)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.FromHexString(string)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: FromHexString
    path: src/Core/SecurityUtilities.cs
    startLine: 291
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Securely parses a hexadecimal string to a byte array.

    This method validates the input format and provides clear error messages.
  example: []
  syntax:
    content: public static byte[] FromHexString(string hexString)
    parameters:
    - id: hexString
      type: System.String
      description: The hexadecimal string to parse.
    return:
      type: System.Byte[]
      description: The parsed byte array.
    content.vb: Public Shared Function FromHexString(hexString As String) As Byte()
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.FromHexString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the hex string format is invalid.
  nameWithType.vb: SecurityUtilities.FromHexString(String)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.FromHexString(String)
  name.vb: FromHexString(String)
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptyString(System.String,System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptyString(System.String,System.String)
  id: ValidateNonEmptyString(System.String,System.String)
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ValidateNonEmptyString(string?, string)
  nameWithType: SecurityUtilities.ValidateNonEmptyString(string?, string)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptyString(string?, string)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ValidateNonEmptyString
    path: src/Core/SecurityUtilities.cs
    startLine: 317
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: >-
    Validates that a string parameter is not null, empty, or whitespace.

    Provides consistent error messages for string validation.
  example: []
  syntax:
    content: public static void ValidateNonEmptyString(string? value, string parameterName)
    parameters:
    - id: value
      type: System.String
      description: The string value to validate.
    - id: parameterName
      type: System.String
      description: The name of the parameter for error reporting.
    content.vb: Public Shared Sub ValidateNonEmptyString(value As String, parameterName As String)
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptyString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the string is null, empty, or whitespace.
  nameWithType.vb: SecurityUtilities.ValidateNonEmptyString(String, String)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptyString(String, String)
  name.vb: ValidateNonEmptyString(String, String)
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptySpan(System.ReadOnlySpan{System.Byte},System.String)
  commentId: M:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptySpan(System.ReadOnlySpan{System.Byte},System.String)
  id: ValidateNonEmptySpan(System.ReadOnlySpan{System.Byte},System.String)
  parent: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities
  langs:
  - csharp
  - vb
  name: ValidateNonEmptySpan(ReadOnlySpan<byte>, string)
  nameWithType: SecurityUtilities.ValidateNonEmptySpan(ReadOnlySpan<byte>, string)
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptySpan(System.ReadOnlySpan<byte>, string)
  type: Method
  source:
    remote:
      path: src/Core/SecurityUtilities.cs
      branch: main
      repo: https://github.com/openforge-sh/liboqs-dotnet.git
    id: ValidateNonEmptySpan
    path: src/Core/SecurityUtilities.cs
    startLine: 329
  assemblies:
  - OpenForge.Cryptography.LibOqs.Core
  namespace: OpenForge.Cryptography.LibOqs.Core
  summary: Validates that a span is not empty and provides consistent error messages.
  example: []
  syntax:
    content: public static void ValidateNonEmptySpan(ReadOnlySpan<byte> span, string parameterName)
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Byte}
      description: The span to validate.
    - id: parameterName
      type: System.String
      description: The name of the parameter for error reporting.
    content.vb: Public Shared Sub ValidateNonEmptySpan(span As ReadOnlySpan(Of Byte), parameterName As String)
  overload: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptySpan*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the span is empty.
  nameWithType.vb: SecurityUtilities.ValidateNonEmptySpan(ReadOnlySpan(Of Byte), String)
  fullName.vb: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptySpan(System.ReadOnlySpan(Of Byte), String)
  name.vb: ValidateNonEmptySpan(ReadOnlySpan(Of Byte), String)
references:
- uid: OpenForge.Cryptography.LibOqs.Core
  commentId: N:OpenForge.Cryptography.LibOqs.Core
  href: OpenForge.html
  name: OpenForge.Cryptography.LibOqs.Core
  nameWithType: OpenForge.Cryptography.LibOqs.Core
  fullName: OpenForge.Cryptography.LibOqs.Core
  spec.csharp:
  - uid: OpenForge
    name: OpenForge
    href: OpenForge.html
  - name: .
  - uid: OpenForge.Cryptography
    name: Cryptography
    href: OpenForge.Cryptography.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs
    name: LibOqs
    href: OpenForge.Cryptography.LibOqs.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs.Core
    name: Core
    href: OpenForge.Cryptography.LibOqs.Core.html
  spec.vb:
  - uid: OpenForge
    name: OpenForge
    href: OpenForge.html
  - name: .
  - uid: OpenForge.Cryptography
    name: Cryptography
    href: OpenForge.Cryptography.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs
    name: LibOqs
    href: OpenForge.Cryptography.LibOqs.html
  - name: .
  - uid: OpenForge.Cryptography.LibOqs.Core
    name: Core
    href: OpenForge.Cryptography.LibOqs.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_ConstantTimeEquals_System_ReadOnlySpan_System_Byte__System_ReadOnlySpan_System_Byte__
  name: ConstantTimeEquals
  nameWithType: SecurityUtilities.ConstantTimeEquals
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeEquals
- uid: System.ReadOnlySpan{System.Byte}
  commentId: T:System.ReadOnlySpan{System.Byte}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<byte>
  nameWithType: ReadOnlySpan<byte>
  fullName: System.ReadOnlySpan<byte>
  nameWithType.vb: ReadOnlySpan(Of Byte)
  fullName.vb: System.ReadOnlySpan(Of Byte)
  name.vb: ReadOnlySpan(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeSelect*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeSelect
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_ConstantTimeSelect_System_Boolean_System_Byte_System_Byte_
  name: ConstantTimeSelect
  nameWithType: SecurityUtilities.ConstantTimeSelect
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeSelect
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeCopy*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeCopy
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_ConstantTimeCopy_System_Boolean_System_ReadOnlySpan_System_Byte__System_Span_System_Byte__
  name: ConstantTimeCopy
  nameWithType: SecurityUtilities.ConstantTimeCopy
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ConstantTimeCopy
- uid: System.Span{System.Byte}
  commentId: T:System.Span{System.Byte}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<byte>
  nameWithType: Span<byte>
  fullName: System.Span<byte>
  nameWithType.vb: Span(Of Byte)
  fullName.vb: System.Span(Of Byte)
  name.vb: Span(Of Byte)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_ValidateParameterLength_System_Byte___System_Int32_System_String_
  name: ValidateParameterLength
  nameWithType: SecurityUtilities.ValidateParameterLength
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_ValidateParameterLengthRange_System_Byte___System_Int32_System_Int32_System_String_
  name: ValidateParameterLengthRange
  nameWithType: SecurityUtilities.ValidateParameterLengthRange
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateParameterLengthRange
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateSize*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateSize
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_ValidateSize_System_Int32_System_Int32_System_String_
  name: ValidateSize
  nameWithType: SecurityUtilities.ValidateSize
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateSize
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateRandomBytesEntropy*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateRandomBytesEntropy
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_ValidateRandomBytesEntropy_System_ReadOnlySpan_System_Byte__System_String_
  name: ValidateRandomBytesEntropy
  nameWithType: SecurityUtilities.ValidateRandomBytesEntropy
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateRandomBytesEntropy
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_CreateDefensiveCopy_System_Byte___
  name: CreateDefensiveCopy
  nameWithType: SecurityUtilities.CreateDefensiveCopy
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.CreateDefensiveCopy
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ToHexString*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ToHexString
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_ToHexString_System_ReadOnlySpan_System_Byte__
  name: ToHexString
  nameWithType: SecurityUtilities.ToHexString
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ToHexString
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.FromHexString*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.FromHexString
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_FromHexString_System_String_
  name: FromHexString
  nameWithType: SecurityUtilities.FromHexString
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.FromHexString
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptyString*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptyString
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_ValidateNonEmptyString_System_String_System_String_
  name: ValidateNonEmptyString
  nameWithType: SecurityUtilities.ValidateNonEmptyString
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptyString
- uid: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptySpan*
  commentId: Overload:OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptySpan
  href: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.html#OpenForge_Cryptography_LibOqs_Core_SecurityUtilities_ValidateNonEmptySpan_System_ReadOnlySpan_System_Byte__System_String_
  name: ValidateNonEmptySpan
  nameWithType: SecurityUtilities.ValidateNonEmptySpan
  fullName: OpenForge.Cryptography.LibOqs.Core.SecurityUtilities.ValidateNonEmptySpan
