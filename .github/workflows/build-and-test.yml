name: Build and Test Multi-Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # Preparation job - builds all native libraries
  prepare-libraries:
    name: Build Native Libraries
    runs-on: [self-hosted, cross-compile]
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Clean workspace
      run: |
        # Clean any previous artifacts
        rm -rf runtimes-* builds/ liboqs/ CoverageReport/ TestResults/
        find . -name "*.cobertura.xml" -delete 2>/dev/null || true

    - name: Build all native libraries
      run: |
        set -euo pipefail
        echo "Starting multi-platform native library build..."
        chmod +x ./build_all_variants.sh

        if ! ./build_all_variants.sh; then
          echo "::error::Native library build failed"
          exit 1
        fi

        echo "Build completed. Library summary:"
        library_count=$(find runtimes-* -name "*.so" -o -name "*.dll" -o -name "*.dylib" | wc -l)
        echo "$library_count libraries built across all variants and platforms"

        if [ "$library_count" -eq 0 ]; then
          echo "::error::No libraries were built"
          exit 1
        fi

    - name: Verify library completeness
      run: |
        set -euo pipefail
        # Verify we have libraries for all expected platform/variant combinations
        expected_count=28  # 7 platforms * 4 variants
        actual_count=$(find runtimes-* -name "*.so" -o -name "*.dll" -o -name "*.dylib" | wc -l)

        echo "Expected: $expected_count libraries"
        echo "Actual: $actual_count libraries"

        if [ "$actual_count" -ne "$expected_count" ]; then
          echo "::error::Library count mismatch. Expected $expected_count, got $actual_count"
          echo "Library inventory:"
          find runtimes-* -name "*.so" -o -name "*.dll" -o -name "*.dylib" | sort
          exit 1
        fi

        echo "âœ… All $expected_count libraries built successfully"

    - name: Upload native libraries
      id: upload
      uses: actions/upload-artifact@v4
      with:
        name: native-libraries-${{ github.run_id }}
        path: runtimes-*/**/*
        retention-days: 1
        if-no-files-found: error

  # Self-hosted Linux builds and tests
  test-linux:
    name: Test ${{ matrix.platform }}
    runs-on: [self-hosted, "${{ matrix.platform }}"]
    needs: prepare-libraries
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        platform:
          - linux-x64
          - linux-arm64
          - linux-musl-x64
          - linux-musl-arm64
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.prepare-libraries.outputs.artifact-name }}
        path: ./

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution (.NET 8)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net8.0; then
          echo "::error::Build failed for ${{ matrix.platform }} (.NET 8)"
          exit 1
        fi

    - name: Build solution (.NET 9)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net9.0; then
          echo "::error::Build failed for ${{ matrix.platform }} (.NET 9)"
          exit 1
        fi

    - name: Run tests (.NET 8)
      run: |
        set -euo pipefail
        echo "Running tests for ${{ matrix.platform }} (.NET 8)..."
        if ! dotnet test --no-build --configuration Release --framework net8.0; then
          echo "::error::Tests failed for ${{ matrix.platform }} (.NET 8)"
          exit 1
        fi

    - name: Run tests (.NET 9)
      run: |
        set -euo pipefail
        echo "Running tests for ${{ matrix.platform }} (.NET 9)..."
        if ! dotnet test --no-build --configuration Release --framework net9.0; then
          echo "::error::Tests failed for ${{ matrix.platform }} (.NET 9)"
          exit 1
        fi

  # GitHub-hosted Windows builds and tests
  test-windows:
    name: Test ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: prepare-libraries
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        include:
          - platform: win-x64
            os: windows-latest
          - platform: win-arm64
            os: windows-11-arm
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.prepare-libraries.outputs.artifact-name }}
        path: ./

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution (.NET 8)
      run: |
        $ErrorActionPreference = "Stop"
        try {
          dotnet build --no-restore --configuration Release --framework net8.0
        } catch {
          Write-Error "Build failed for ${{ matrix.platform }} (.NET 8)"
          exit 1
        }

    - name: Build solution (.NET 9)
      run: |
        $ErrorActionPreference = "Stop"
        try {
          dotnet build --no-restore --configuration Release --framework net9.0
        } catch {
          Write-Error "Build failed for ${{ matrix.platform }} (.NET 9)"
          exit 1
        }

    - name: Run tests (.NET 8)
      run: |
        $ErrorActionPreference = "Stop"
        Write-Host "Running tests for ${{ matrix.platform }} (.NET 8)..."
        try {
          dotnet test --no-build --configuration Release --framework net8.0
        } catch {
          Write-Error "Tests failed for ${{ matrix.platform }} (.NET 8)"
          exit 1
        }

    - name: Run tests (.NET 9)
      run: |
        $ErrorActionPreference = "Stop"
        Write-Host "Running tests for ${{ matrix.platform }} (.NET 9)..."
        try {
          dotnet test --no-build --configuration Release --framework net9.0
        } catch {
          Write-Error "Tests failed for ${{ matrix.platform }} (.NET 9)"
          exit 1
        }

  # GitHub-hosted macOS builds and tests
  test-macos:
    name: Test macOS ARM64
    runs-on: macos-latest
    needs: prepare-libraries
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.prepare-libraries.outputs.artifact-name }}
        path: ./

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution (.NET 8)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net8.0; then
          echo "::error::Build failed for osx-arm64 (.NET 8)"
          exit 1
        fi

    - name: Build solution (.NET 9)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net9.0; then
          echo "::error::Build failed for osx-arm64 (.NET 9)"
          exit 1
        fi

    - name: Run tests (.NET 8)
      run: |
        set -euo pipefail
        echo "Running tests for osx-arm64 (.NET 8)..."
        if ! dotnet test --no-build --configuration Release --framework net8.0; then
          echo "::error::Tests failed for osx-arm64 (.NET 8)"
          exit 1
        fi

    - name: Run tests (.NET 9)
      run: |
        set -euo pipefail
        echo "Running tests for osx-arm64 (.NET 9)..."
        if ! dotnet test --no-build --configuration Release --framework net9.0; then
          echo "::error::Tests failed for osx-arm64 (.NET 9)"
          exit 1
        fi

  # Package and publish to NuGet
  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [prepare-libraries, test-linux, test-windows, test-macos]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.prepare-libraries.outputs.artifact-name }}
        path: ./

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution for packaging
      run: |
        dotnet build --no-restore --configuration Release

    - name: Create NuGet packages
      run: |
        echo "Creating NuGet packages..."
        dotnet pack --no-build --configuration Release --output ./packages \
          -p:IncludeSymbols=true \
          -p:SymbolPackageFormat=snupkg

    - name: Verify package contents
      run: |
        echo "Package contents:"
        ls -la ./packages/

        echo "Verifying native libraries are included..."
        for package in ./packages/*.nupkg; do
          echo "Contents of $package:"
          unzip -l "$package" | grep -E '\.(so|dll|dylib)$' || echo "No native libraries found in $package"
        done

    # - name: Publish to NuGet
    #   run: |
    #     echo "Publishing packages to NuGet..."
    #     for package in ./packages/*.nupkg; do
    #       echo "Publishing $package..."
    #       dotnet nuget push "$package" \
    #         --api-key ${{ secrets.NUGET_API_KEY }} \
    #         --source https://api.nuget.org/v3/index.json \
    #         --skip-duplicate
    #     done

    #     echo "âœ… Successfully published to NuGet!"

    # - name: Upload packages as artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: nuget-packages-${{ github.run_id }}
    #     path: ./packages/*.nupkg
    #     retention-days: 30