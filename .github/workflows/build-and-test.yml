name: Build and Test Multi-Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # Preparation job - builds all native libraries
  prepare-libraries:
    name: Build Native Libraries
    runs-on: [self-hosted, cross-compile]
    outputs:
      artifact-name: native-libraries-${{ github.run_id }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Clean workspace
      run: |
        # Clean any previous artifacts
        rm -rf runtimes-* builds/ liboqs/ CoverageReport/ TestResults/
        find . -name "*.cobertura.xml" -delete 2>/dev/null || true

    - name: Get LibOQS latest commit hash
      id: liboqs-hash
      run: |
        # Get the latest commit hash from the LibOQS repository
        LIBOQS_REPO="https://github.com/open-quantum-safe/liboqs.git"
        LIBOQS_BRANCH="main"
        LIBOQS_HASH=$(git ls-remote $LIBOQS_REPO refs/heads/$LIBOQS_BRANCH | cut -f1)
        echo "hash=$LIBOQS_HASH" >> $GITHUB_OUTPUT
        echo "LibOQS latest commit: $LIBOQS_HASH"

    - name: Cache native libraries
      id: cache-libs
      uses: actions/cache@v4
      with:
        path: |
          runtimes-full/
          runtimes-kem/
          runtimes-sig/
          runtimes-sig-stfl/
        key: native-libs-${{ steps.liboqs-hash.outputs.hash }}-${{ hashFiles('build_all_variants.sh') }}
        restore-keys: |
          native-libs-${{ steps.liboqs-hash.outputs.hash }}-
          native-libs-

    - name: Build all native libraries
      if: steps.cache-libs.outputs.cache-hit != 'true'
      run: |
        set -euo pipefail
        echo "Cache miss - building native libraries from source..."
        echo "LibOQS commit: ${{ steps.liboqs-hash.outputs.hash }}"
        chmod +x ./build_all_variants.sh

        if ! ./build_all_variants.sh; then
          echo "::error::Native library build failed"
          exit 1
        fi

        echo "Build completed. Library summary:"
        library_count=$(find runtimes-* -name "*.so" -o -name "*.dll" -o -name "*.dylib" | wc -l)
        echo "$library_count libraries built across all variants and platforms"

        if [ "$library_count" -eq 0 ]; then
          echo "::error::No libraries were built"
          exit 1
        fi

    - name: Cache hit notification
      if: steps.cache-libs.outputs.cache-hit == 'true'
      run: |
        echo "✅ Cache hit! Using cached native libraries"
        echo "LibOQS commit: ${{ steps.liboqs-hash.outputs.hash }}"
        library_count=$(find runtimes-* -name "*.so" -o -name "*.dll" -o -name "*.dylib" | wc -l)
        echo "$library_count cached libraries restored"

    - name: Verify library completeness
      run: |
        set -euo pipefail
        # Verify we have libraries for all expected platform/variant combinations
        expected_count=28  # 7 platforms * 4 variants
        actual_count=$(find runtimes-* -name "*.so" -o -name "*.dll" -o -name "*.dylib" | wc -l)

        echo "Expected: $expected_count libraries"
        echo "Actual: $actual_count libraries"

        if [ "$actual_count" -ne "$expected_count" ]; then
          echo "::error::Library count mismatch. Expected $expected_count, got $actual_count"
          echo "Library inventory:"
          find runtimes-* -name "*.so" -o -name "*.dll" -o -name "*.dylib" | sort
          exit 1
        fi

        echo "✅ All $expected_count libraries built successfully"

    - name: Upload native libraries
      id: upload
      uses: actions/upload-artifact@v4
      with:
        name: native-libraries-${{ github.run_id }}
        path: |
          runtimes-full/
          runtimes-kem/
          runtimes-sig/
          runtimes-sig-stfl/
        retention-days: 1
        if-no-files-found: error

  # Self-hosted Linux x64 builds and tests
  test-linux-x64:
    name: Test ${{ matrix.platform }}
    runs-on: [self-hosted, "${{ matrix.platform }}"]
    needs: prepare-libraries
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        platform:
          - linux-x64
          - linux-musl-x64
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.prepare-libraries.outputs.artifact-name }}
        path: ./

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x
      env:
        DOTNET_INSTALL_DIR: ${{ runner.temp }}/.dotnet

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution (.NET 8)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net8.0; then
          echo "::error::Build failed for ${{ matrix.platform }} (.NET 8)"
          exit 1
        fi

    - name: Build solution (.NET 9)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net9.0; then
          echo "::error::Build failed for ${{ matrix.platform }} (.NET 9)"
          exit 1
        fi

    - name: Run tests (.NET 8)
      run: |
        set -euo pipefail
        echo "Running tests for ${{ matrix.platform }} (.NET 8)..."
        if ! dotnet test --no-build --configuration Release --framework net8.0 -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml; then
          echo "::error::Tests failed for ${{ matrix.platform }} (.NET 8)"
          exit 1
        fi

    - name: Run tests (.NET 9)
      run: |
        set -euo pipefail
        echo "Running tests for ${{ matrix.platform }} (.NET 9)..."
        if ! dotnet test --no-build --configuration Release --framework net9.0 -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml; then
          echo "::error::Tests failed for ${{ matrix.platform }} (.NET 9)"
          exit 1
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-${{ matrix.platform }}-${{ github.run_id }}
        path: tests/**/bin/**/TestResults/coverage.cobertura.xml
        retention-days: 1
        if-no-files-found: warn

  # Self-hosted Linux ARM64 builds and tests  
  test-linux-arm64:
    name: Test ${{ matrix.platform }}
    runs-on: [self-hosted, "${{ matrix.platform }}"]
    needs: prepare-libraries
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        platform:
          - linux-arm64
          - linux-musl-arm64
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.prepare-libraries.outputs.artifact-name }}
        path: ./

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x
      env:
        DOTNET_INSTALL_DIR: ${{ runner.temp }}/.dotnet

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution (.NET 8)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net8.0; then
          echo "::error::Build failed for ${{ matrix.platform }} (.NET 8)"
          exit 1
        fi

    - name: Build solution (.NET 9)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net9.0; then
          echo "::error::Build failed for ${{ matrix.platform }} (.NET 9)"
          exit 1
        fi

    - name: Run tests (.NET 8)
      run: |
        set -euo pipefail
        echo "Running tests for ${{ matrix.platform }} (.NET 8)..."
        if ! dotnet test --no-build --configuration Release --framework net8.0 -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml; then
          echo "::error::Tests failed for ${{ matrix.platform }} (.NET 8)"
          exit 1
        fi

    - name: Run tests (.NET 9)
      run: |
        set -euo pipefail
        echo "Running tests for ${{ matrix.platform }} (.NET 9)..."
        if ! dotnet test --no-build --configuration Release --framework net9.0 -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml; then
          echo "::error::Tests failed for ${{ matrix.platform }} (.NET 9)"
          exit 1
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-${{ matrix.platform }}-${{ github.run_id }}
        path: tests/**/bin/**/TestResults/coverage.cobertura.xml
        retention-days: 1
        if-no-files-found: warn

  # GitHub-hosted Windows builds and tests
  test-windows:
    name: Test ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: prepare-libraries
    strategy:
      matrix:
        include:
          - platform: win-x64
            os: windows-latest
          - platform: win-arm64
            os: windows-11-arm
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.prepare-libraries.outputs.artifact-name }}
        path: ./

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x
      env:
        DOTNET_INSTALL_DIR: ${{ runner.temp }}/.dotnet

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution (.NET 8)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net8.0; then
          echo "::error::Build failed for ${{ matrix.platform }} (.NET 8)"
          exit 1
        fi

    - name: Build solution (.NET 9)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net9.0; then
          echo "::error::Build failed for ${{ matrix.platform }} (.NET 9)"
          exit 1
        fi

    - name: Run tests (.NET 8)
      run: |
        set -euo pipefail
        echo "Running tests for ${{ matrix.platform }} (.NET 8)..."
        if ! dotnet test --no-build --configuration Release --framework net8.0 -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml; then
          echo "::error::Tests failed for ${{ matrix.platform }} (.NET 8)"
          exit 1
        fi

    - name: Run tests (.NET 9)
      run: |
        set -euo pipefail
        echo "Running tests for ${{ matrix.platform }} (.NET 9)..."
        if ! dotnet test --no-build --configuration Release --framework net9.0 -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml; then
          echo "::error::Tests failed for ${{ matrix.platform }} (.NET 9)"
          exit 1
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-${{ matrix.platform }}-${{ github.run_id }}
        path: tests/**/bin/**/TestResults/coverage.cobertura.xml
        retention-days: 1
        if-no-files-found: warn

  # GitHub-hosted macOS builds and tests
  test-macos:
    name: Test macOS ARM64
    runs-on: macos-latest
    needs: prepare-libraries
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.prepare-libraries.outputs.artifact-name }}
        path: ./

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution (.NET 8)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net8.0; then
          echo "::error::Build failed for osx-arm64 (.NET 8)"
          exit 1
        fi

    - name: Build solution (.NET 9)
      run: |
        set -euo pipefail
        if ! dotnet build --no-restore --configuration Release --framework net9.0; then
          echo "::error::Build failed for osx-arm64 (.NET 9)"
          exit 1
        fi

    - name: Run tests (.NET 8)
      run: |
        set -euo pipefail
        echo "Running tests for osx-arm64 (.NET 8)..."
        if ! dotnet test --no-build --configuration Release --framework net8.0 --logger trx --results-directory TestResults -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml; then
          echo "::error::Tests failed for osx-arm64 (.NET 8)"
          exit 1
        fi

    - name: Run tests (.NET 9)
      run: |
        set -euo pipefail
        echo "Running tests for osx-arm64 (.NET 9)..."
        if ! dotnet test --no-build --configuration Release --framework net9.0 --logger trx --results-directory TestResults -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml; then
          echo "::error::Tests failed for osx-arm64 (.NET 9)"
          exit 1
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-osx-arm64-${{ github.run_id }}
        path: |
          TestResults/
          **/TestResults/
          tests/**/bin/**/TestResults/
        retention-days: 5
        if-no-files-found: warn

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-osx-arm64-${{ github.run_id }}
        path: tests/**/bin/**/TestResults/coverage.cobertura.xml
        retention-days: 1
        if-no-files-found: warn

  # Generate and publish documentation with coverage
  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: [prepare-libraries, test-linux-x64, test-linux-arm64, test-windows, test-macos]
    if: success()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.prepare-libraries.outputs.artifact-name }}
        path: ./

    - name: Download all coverage reports
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-*
        path: ./coverage-artifacts
        merge-multiple: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: List coverage files
      run: |
        echo "Coverage files found:"
        find ./coverage-artifacts -name "coverage.cobertura.xml" -type f || echo "No coverage files found"

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.13
      with:
        reports: './coverage-artifacts/**/coverage.cobertura.xml'
        targetdir: './CoverageReport'
        reporttypes: 'Html;Cobertura;TextSummary'
        assemblyfilters: '+OpenForge.Cryptography.LibOqs*;-*.Tests'
        classfilters: '-*Native*;-*.Tests.*'
        filefilters: '-**/tests/**;-**/obj/**'
        verbosity: 'Info'
        title: 'OpenForge Cryptography LibOqs Coverage Report'
        tag: '${{ github.run_number }}_${{ github.run_id }}'

    - name: Prepare coverage for DocFX
      run: |
        echo "Preparing coverage report for DocFX..."
        mkdir coverage
        cp -r CoverageReport/* coverage/
        echo "Coverage report prepared successfully"

    - name: Setup DocFX
      run: |
        echo "Installing DocFX..."
        dotnet tool install -g docfx
        echo "DocFX installed successfully"

    - name: Build documentation
      run: |
        echo "Building documentation with DocFX..."
        docfx build docfx.json
        echo "Documentation built successfully"

    - name: Deploy to docs branch
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to docs branch..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git checkout docs
        
        # Remove all files except _site
        find . -maxdepth 1 ! -name '_site' ! -name '.git' -exec rm -rf {} + 2>/dev/null || true
        
        # Move _site contents to root
        mv _site docs
        rmdir _site
        
        # Add and commit
        git add .
        git commit -m "Update documentation and coverage report - ${{ github.sha }}" || echo "No changes to commit"
        
        # Push to docs branch
        git push origin docs --force
        echo "Documentation deployed to docs branch"

  # Package and publish to NuGet
  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [prepare-libraries, test-linux-x64, test-linux-arm64, test-windows, test-macos]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download native libraries
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.prepare-libraries.outputs.artifact-name }}
        path: ./

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution for packaging
      run: |
        dotnet build --no-restore --configuration Release

    - name: Create NuGet packages
      run: |
        echo "Creating NuGet packages..."
        dotnet pack --no-build --configuration Release --output ./packages \
          -p:IncludeSymbols=true \
          -p:SymbolPackageFormat=snupkg

    - name: Verify package contents
      run: |
        echo "Package contents:"
        ls -la ./packages/

        echo "Verifying native libraries are included..."
        for package in ./packages/*.nupkg; do
          echo "Contents of $package:"
          unzip -l "$package" | grep -E '\.(so|dll|dylib)$' || echo "No native libraries found in $package"
        done

    # - name: Publish to NuGet
    #   run: |
    #     echo "Publishing packages to NuGet..."
    #     for package in ./packages/*.nupkg; do
    #       echo "Publishing $package..."
    #       dotnet nuget push "$package" \
    #         --api-key ${{ secrets.NUGET_API_KEY }} \
    #         --source https://api.nuget.org/v3/index.json \
    #         --skip-duplicate
    #     done

    #     echo "✅ Successfully published to NuGet!"

    # - name: Upload packages as artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: nuget-packages-${{ github.run_id }}
    #     path: ./packages/*.nupkg
    #     retention-days: 30